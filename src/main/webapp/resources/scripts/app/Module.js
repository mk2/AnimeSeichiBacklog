// Generated by CoffeeScript 1.7.1

/*
 Class for capability of mixin.
 see http://minghai.github.io/library/coffeescript/03_classes.html
 */

(function () {
    var __indexOf = [].indexOf || function (item) {
        for (var i = 0, l = this.length; i < l; i++) {
            if (i in this && this[i] === item) return i;
        }
        return -1;
    };

    define([], function () {
        var Module, moduleKeywords;
        moduleKeywords = ['extended', 'included'];
        return Module = (function () {
            function Module() {
            }

            Module.prototype.assert = function () {
                var _ref;
                return typeof console !== "undefined" && console !== null ? (_ref = console.assert) != null ? _ref.apply(console, arguments) : void 0 : void 0;
            };

            Module.prototype.log = function () {
                var _ref;
                if (window.system.debug) {
                    return typeof console !== "undefined" && console !== null ? (_ref = console.log) != null ? _ref.apply(console, arguments) : void 0 : void 0;
                }
            };

            Module.prototype.debug = function () {
                var _ref;
                if (window.system.debug) {
                    return typeof console !== "undefined" && console !== null ? (_ref = console.debug) != null ? _ref.apply(console, arguments) : void 0 : void 0;
                }
            };

            Module.prototype.warn = function () {
                var _ref;
                return typeof console !== "undefined" && console !== null ? (_ref = console.warn) != null ? _ref.apply(console, arguments) : void 0 : void 0;
            };

            Module.prototype.error = function () {
                var _ref;
                return typeof console !== "undefined" && console !== null ? (_ref = console.error) != null ? _ref.apply(console, arguments) : void 0 : void 0;
            };

            Module.prototype.group = function () {
                var _ref;
                return typeof console !== "undefined" && console !== null ? (_ref = console.group) != null ? _ref.apply(console, arguments) : void 0 : void 0;
            };

            Module.prototype.groupCollapsed = function () {
                var _ref;
                return typeof console !== "undefined" && console !== null ? (_ref = console.groupCollapsed) != null ? _ref.apply(console, arguments) : void 0 : void 0;
            };

            Module.prototype.groupEnd = function () {
                var _ref;
                return typeof console !== "undefined" && console !== null ? (_ref = console.groupEnd) != null ? _ref.apply(console, arguments) : void 0 : void 0;
            };

            Module.prototype.time = function () {
                var _ref;
                return typeof console !== "undefined" && console !== null ? (_ref = console.time) != null ? _ref.apply(console, arguments) : void 0 : void 0;
            };

            Module.prototype.timeEnd = function () {
                var _ref;
                return typeof console !== "undefined" && console !== null ? (_ref = console.timeEnd) != null ? _ref.apply(console, arguments) : void 0 : void 0;
            };

            Module.extend = function (obj) {
                var key, value, _ref;
                for (key in obj) {
                    value = obj[key];
                    if (__indexOf.call(moduleKeywords, key) < 0) {
                        this[key] = value;
                    }
                }
                if ((_ref = obj.extended) != null) {
                    _ref.apply(this);
                }
                return this;
            };

            Module.include = function (obj) {
                var key, value, _ref;
                for (key in obj) {
                    value = obj[key];
                    if (__indexOf.call(moduleKeywords, key) < 0) {
                        this.prototype[key] = value;
                    }
                }
                if ((_ref = obj.included) != null) {
                    _ref.apply(this);
                }
                return this;
            };

            return Module;

        })();
    });

}).call(this);

//# sourceMappingURL=Module.map
