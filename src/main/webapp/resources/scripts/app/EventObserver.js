// Generated by CoffeeScript 1.7.1
(function () {
    var __hasProp = {}.hasOwnProperty,
        __extends = function (child, parent) {
            for (var key in parent) {
                if (__hasProp.call(parent, key)) child[key] = parent[key];
            }
            function ctor() {
                this.constructor = child;
            }

            ctor.prototype = parent.prototype;
            child.prototype = new ctor();
            child.__super__ = parent.prototype;
            return child;
        };

    define(['app/Module'], function (Module) {
        var EventObserver;
        return EventObserver = (function (_super) {
            var EventObserverBody;

            __extends(EventObserver, _super);

            function EventObserver() {
                return EventObserver.__super__.constructor.apply(this, arguments);
            }

            EventObserver.instance = null;

            EventObserver.getInstance = function () {
                return EventObserver.instance != null ? EventObserver.instance : EventObserver.instance = new EventObserverBody();
            };

            EventObserverBody = (function (_super1) {
                __extends(EventObserverBody, _super1);

                EventObserverBody.prototype.subscribers = [];

                function EventObserverBody() {
                    this.subscribers = [];
                }

                EventObserverBody.prototype.notify = function (event, options) {
                    var eventFired, subscriber, _i, _len, _ref, _ref1;
                    eventFired = false;
                    _ref = this.subscribers;
                    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                        subscriber = _ref[_i];
                        if (!(subscriber.event === event)) {
                            continue;
                        }
                        this.debug("FIRED [EVENT] " + event.name + ":" + event.description);
                        if ((_ref1 = subscriber.callback) != null) {
                            _ref1.apply(subscriber.thiz, [options]);
                        }
                        eventFired = true;
                    }
                    this.assert(eventFired, "NO SUBSCRIBERS [EVENT] " + event);
                    return this;
                };

                EventObserverBody.prototype.subscribe = function (event, thiz, callback) {
                    this.debug("ADD SUBSCRIBER ON:[EVENT] " + event + " WITH:[CALLBACK] " + callback);
                    this.subscribers.push({
                        'event': event,
                        'callback': callback,
                        'thiz': thiz
                    });
                    return this;
                };

                return EventObserverBody;

            })(Module);

            return EventObserver;

        })(Module);
    });

}).call(this);

//# sourceMappingURL=EventObserver.map
