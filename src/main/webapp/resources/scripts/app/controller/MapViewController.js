// Generated by CoffeeScript 1.7.1

/*
 MapView is hoding map object, and treating popups.
 */

(function () {
    var __hasProp = {}.hasOwnProperty,
        __extends = function (child, parent) {
            for (var key in parent) {
                if (__hasProp.call(parent, key)) child[key] = parent[key];
            }
            function ctor() {
                this.constructor = child;
            }

            ctor.prototype = parent.prototype;
            child.prototype = new ctor();
            child.__super__ = parent.prototype;
            return child;
        };

    define(['leaflet', 'doT', 'jquery', 'app/Module', 'app/leaflet-control/NotificationControl', 'L.Control.MousePosition', 'text!app/dot-template/popupOnMapView.html', 'app/EventObserver', 'app/Events'], function (L, doT, $, Module, NotificationControl, LControlMousePosition, popupTemplate, EventObserver, Events) {
        var MapViewController;
        return MapViewController = (function (_super) {
            __extends(MapViewController, _super);

            MapViewController.prototype.map = null;

            MapViewController.prototype.mapId = null;

            MapViewController.prototype.geoJsonLayer = null;

            MapViewController.prototype.popupTemplateFunc = doT.template(popupTemplate);

            MapViewController.prototype.eventObserver = null;


            /*
             @param mapId mapdiv„ÅÆid
             @param options = {
             maxZoom: max zoom Level
             initBbox[4]: latlng of initial map view area
             }
             */

            function MapViewController(mapId, options) {
                this.mapId = mapId;
                this.options = options;
                this.eventObserver = EventObserver.getInstance();
                this.eventObserver.subscribe(Events.REMOVE_LAYER, this, this.removeLayer);
                this.map = L.map(mapId, {
                    zoomControl: false
                }).fitBounds([
                    [this.options.initBbox[0], this.options.initBbox[1]],
                    [this.options.initBbox[2], this.options.initBbox[3]]
                ]);
                L.tileLayer('http://{s}.tiles.mapbox.com/v3/mk2.inned2mk/{z}/{x}/{y}.png', {
                    attribution: 'Map data &copy',
                    maxZoom: this.options.maxZoom
                }).addTo(this.map);
                this.setupMapControlls();
                this.updateFeaturesOnMap();
            }

            MapViewController.prototype.addLayer = function (layer) {
                return this.map.addLayer(layer);
            };

            MapViewController.prototype.addEventHandler = function (eventName, eventHandler, thiz) {
                return this.map.on(eventName, eventHandler.bind(thiz));
            };

            MapViewController.prototype.addControl = function (control) {
                return this.map.addControl(control);
            };

            MapViewController.prototype.setupMapControlls = function () {
                var mousePositionControl, notificationControl, zoomControl;
                this.map.on('dragend', (function (_this) {
                    return function (e) {
                        return _this.updateFeaturesOnMap();
                    };
                })(this));
                this.map.on('zoomend', (function (_this) {
                    return function (e) {
                        return _this.updateFeaturesOnMap();
                    };
                })(this));
                notificationControl = new NotificationControl();
                this.map.addControl(notificationControl);
                zoomControl = L.control.zoom();
                this.map.addControl(zoomControl);
                mousePositionControl = L.control.mousePosition();
                return this.map.addControl(mousePositionControl);
            };

            MapViewController.prototype.removeLayer = function (options) {
                var layer;
                layer = options != null ? options.layer : void 0;
                this.log(options.layer);
                this.log('remove layer event');
                if (layer !== null) {
                    return this.map.removeLayer(layer);
                }
            };


            /*
             Update all features on map.
             */

            MapViewController.prototype.updateFeaturesOnMap = function () {
                var latLngBounds;
                latLngBounds = this.map.getBounds();
                return $.getJSON("/f/xr/" + (latLngBounds.getWest()) + "/" + (latLngBounds.getSouth()) + "/" + (latLngBounds.getEast()) + "/" + (latLngBounds.getNorth()) + "/", (function (_this) {
                    return function (data, textStatus, jqXHR) {
                        var onEachFeature;
                        if (_this.geoJsonLayer !== null) {
                            _this.map.removeLayer(_this.geoJsonLayer);
                            _this.geoJsonLayer = null;
                        }
                        onEachFeature = function (feature, layer) {
                            return layer.bindPopup(_this.popupTemplateFunc(feature.properties), {
                                minWidth: 300,
                                maxWidth: 450,
                                autoPan: true,
                                keepInView: true,
                                feature: feature
                            });
                        };
                        return _this.geoJsonLayer = L.geoJson(data, {
                            onEachFeature: onEachFeature
                        }).addTo(_this.map);
                    };
                })(this));
            };

            return MapViewController;

        })(Module);
    });

}).call(this);

//# sourceMappingURL=MapViewController.map
