// Generated by CoffeeScript 1.7.1

/*
 RemarkView is holding all remarks.
 */

(function () {
    var __hasProp = {}.hasOwnProperty,
        __extends = function (child, parent) {
            for (var key in parent) {
                if (__hasProp.call(parent, key)) child[key] = parent[key];
            }
            function ctor() {
                this.constructor = child;
            }

            ctor.prototype = parent.prototype;
            child.prototype = new ctor();
            child.__super__ = parent.prototype;
            return child;
        };

    define(['leaflet', 'doT', 'jquery', 'app/Module', 'L.Control.Sidebar', 'text!app/dot-template/featureOnRemarkView.html!strip', 'text!app/dot-template/remarkOnRemarkView.html!strip'], function (L, doT, $, Module, LControlSidebar, featureTemplate, remarkTemplate) {
        var RemarkViewController;
        return RemarkViewController = (function (_super) {
            __extends(RemarkViewController, _super);

            RemarkViewController.prototype.viewControl = null;

            RemarkViewController.prototype.viewControlId = null;

            RemarkViewController.prototype.featureTemplateFunc = doT.template(featureTemplate);

            RemarkViewController.prototype.remarkTemplateFunc = doT.template(remarkTemplate);

            function RemarkViewController(map, viewControlId) {
                this.viewControlId = viewControlId;
                this.viewControl = L.control.sidebar(this.viewControlId, {
                    position: 'right'
                });
                map.addControl(this.viewControl);
                map.on('popupopen', (function (_this) {
                    return function (e) {
                        var _map;
                        _map = map;
                        return _this.onPopupOpen(e, _map);
                    };
                })(this));
            }

            RemarkViewController.prototype.showViewControl = function () {
                return this.viewControl.show();
            };

            RemarkViewController.prototype.onPopupOpen = function (e, map) {
                var feature, featureId, latLngBounds;
                feature = e.popup.options.feature;
                this.setBuiltFeatureTemplateOn('#feature-remark', feature.properties);
                featureId = feature.properties.featureId;
                this.setBuiltRemarksTemplateOn('#remarks', featureId);
                $('#_remark_featureId').attr('value', featureId);
                latLngBounds = map != null ? map.getBounds() : void 0;
                $('#_remark_bbox0').attr('value', latLngBounds != null ? latLngBounds.getSouth() : void 0);
                $('#_remark_bbox1').attr('value', latLngBounds != null ? latLngBounds.getWest() : void 0);
                $('#_remark_bbox2').attr('value', latLngBounds != null ? latLngBounds.getNorth() : void 0);
                $('#_remark_bbox3').attr('value', latLngBounds != null ? latLngBounds.getEast() : void 0);
                return this.log('popup open catched');
            };

            RemarkViewController.prototype.setBuiltFeatureTemplateOn = function (divId, featureProperties) {
                return $(divId).html(this.featureTemplateFunc(featureProperties));
            };

            RemarkViewController.prototype.setBuiltRemarksTemplateOn = function (divId, featureId) {
                return $.getJSON("/r/xr/" + featureId + "/", (function (_this) {
                    return function (data, status, jqXHR) {
                        var html, remarks;
                        remarks = data;
                        html = _this.toHtmlFromRemarks(remarks);
                        return $(divId).html(html);
                    };
                })(this));
            };

            RemarkViewController.prototype.toHtmlFromRemarks = function (remarks) {
                var html, remark, _i, _len;
                html = "";
                for (_i = 0, _len = remarks.length; _i < _len; _i++) {
                    remark = remarks[_i];
                    html += this.remarkTemplateFunc(remark);
                }
                return html;
            };

            return RemarkViewController;

        })(Module);
    });

}).call(this);

//# sourceMappingURL=RemarkViewController.map
